1. Git 최초 설정
Git 전역으로 사용자 이름과 이메일 주소를 설정
GitHub 계정과는 별개

터미널 프로그램 (Git Bash, iTerm2)에서 아래 명령어 실행
git config --global user.name "(본인 이름)"
git config --global user.email "(본인 이메일)"
 

아래의 명령어들로 확인
git config --global user.name
git config --global user.email

기본 브랜치명 변경

git config --global init.defaultBranch main

2. 프로젝트 생성 & Git 관리 시작
적당한 위치에 원하는 이름으로 폴더를 생성하고 VS Code로 열람

해당 폴더에서(VS Code 터미널 기본) 아래 명령어 입력


.gitignore  파일 생성해서 공개하고 싶지 않은것들 여기에 넣기 

.gitignore 형식
https://git-scm.com/docs/gitignore 참조

-------------------------------------------------


1. 프로젝트의 변경사항들을 타임캡슐(버전)에 담기
추적하지 않는(untracked) 파일: Git의 관리에 들어간 적 없는 파일

변경사항 확인
git status

파일 하나 담기
git add tigers.yaml

모든 파일 담기
git add .


-----------------------------------------

2. 타임캡슐 묻기
아래 명령어로 commit

git commit

커밋 메시지까지 함께 작성하기
git commit -m "FIRST COMMIT"

아래 명령어와 소스트리로 확인
git log


TIP add와 commit 한꺼번에   (새로 추가된(untracked) 파일이 없을 때 한정)
git commit -am "(메시지)"

---------------------------

Git에서 과거로 돌아가는 두 방식
reset : 원하는 시점으로 돌아간 뒤 이후 내역들을 지웁니다.
git reset --hard (돌아갈 커밋 해시)

git reset --hard 💡 뒤에 커밋 해시가 없으면 마지막 커밋을 가리킴


revert : 되돌리기 원하는 시점의 커밋을 거꾸로 실행합니다.
git revert (되돌릴 커밋 해시)
:wq로 커밋 메시지 저장


커밋해버리지 않고 revert하기
git revert --no-commit (되돌릴  커밋 해시)

원하는 다른 작업을 추가한 다음 함께 커밋
취소하려면 git reset --hard

-------------------------------------------------------------
1. 브랜치 생성 / 이동 / 삭제하기
add-coach란 이름의 브랜치 생성
git branch add-coach

브랜치 목록 확인

git branch


add-coach 브랜치로 이동

git switch add-coach

checkout 명령어가 Git 2.23 버전부터 switch, restore로 분리


브랜치 생성과 동시에 이동하기

git switch -c new-teams


브랜치 삭제하기
git branch -d (삭제할 브랜치명)


-----------------------------------------------------------------






지워질 브랜치에만 있는 내용의 커밋이 있을 경우
즉 다른 브랜치로 가져오지 않은 내용이 있는 브랜치를 지울 때는
-d 대신 -D(대문자)로 강제 삭제해야 합니다.


git branch -D (강제삭제할 브랜치명)


브랜치 이름 바꾸기

git branch -m (기존 브랜치명) (새 브랜치명)





----------------------------------------

서로 다른 브랜치를 합치는 두 방식
merge : 두 브랜치를 한 커밋에 이어붙입니다.

브랜치 사용내역을 남길 필요가 있을 때 적합한 방식입니다.
다른 형태의 merge에 대해서도 이후 다루게 될 것입니다.
rebase : 브랜치를 다른 브랜치에 이어붙입니다.

한 줄로 깔끔히 정리된 내역을 유지하기 원할 때 적합합니다.
이미 팀원과 공유된 커밋들에 대해서는 사용하지 않는 것이 좋습니다.




1. merge로 합치기
git merge add-coach

:wq로 자동입력된 커밋 메시지 저장하여 마무리

💡 merge는 reset으로 되돌리기 가능
merge도 하나의 커밋
merge하기 전 해당 브랜치의 마지막 시점으로


병합된 브랜치는 삭제
삭제 전 소스트리에서 add-coach 위치 확인
git branch -d add-coach


-------------------------------------------------------------

rebase로 합치기       ( 합칠 브랜치에서 메인을 건들여야함 )
new-teams 브랜치를 main 브랜치로 rebase

new-teams 브랜치로 이동

🛑 merge때와는 반대!
아래의 명령어로 병합

git rebase main

------------------------------------------

소스트리에서 상태 확인

main 브랜치는 뒤쳐져 있는 상황

main 브랜치로 이동 후 아래 명령어로 new-teams의 시점으로 fast-forward

git merge new-teams

     이후 new-teams 브랜치 삭제

------------------------------------

1. merge 충돌 해결하기

오류 메시지와 git status 확인
VS Code에서 해당 부분 확인

당장 충돌 해결이 어려울 경우 아래 명령어로 merge 중단
git merge --abort

해결 가능 시 충돌 부분을 수정한 뒤 git add ., git commit으로 병합 완료

--------------------------------
2. rebase 충돌 해결하기


오류 메시지와 git status 확인
VS Code에서 해당 부분 확인

당장 충돌 해결이 어려울 경우 아래 명령어로 merge 중단
git rebase --abort

해결 가능 시
충돌 부분을 수정한 뒤 git add .
아래 명령어로 계속
git rebase --continue
충돌이 모두 해결될 때까지 반복



----------------------------------------


1. 로컬에 원격 저장소 추가 후 푸시
⭐️ 이번 강에서는 HTTPS 프로토콜 사용


GitHub 레포지토리 생성 후 복붙 명령어

git remote add origin (원격 저장소 주소) 




	로컬의 Git 저장소에 원격 저장소로의 연결 추가

	원격 저장소 이름에 흔히 origin 사용. 다른 것으로 수정 가능


git branch -M main

 		=> GitHub 권장 - 기본 브랜치명을 main으로

git push -u origin main 

	로컬 저장소의 커밋 내역들 원격으로 push(업로드)

	-u 또는 --set-upstream : 현재 브랜치와 명시된 원격 브랜치 기본 연결
---------------------------------------

 GitHub의 해당 레포지토리 페이지 새로고침하여 살펴보기
파일들 내용
커밋 내역들

원격 목록 보기
git remote
	
	자세히 보기: git remote -v

원격 지우기 (로컬 프로젝트와의 연결만 없애는 것. GitHub의 레포지토리는 지워지지 않음)
git remote remove (origin 등 원격 이름)

--------------------------------------------------------------------------------
2. GitHub에서 프로젝트 다운받기
Download ZIP: 파일들만 다운받음, Git 관리내역 제외
Git clone: Git 관리내역 포함 다운로드

터미널이나 Git Bash에서 대상 폴더 이동 후

git clone (원격 저장소 주소)


---------------------------------------------------------

1. 원격으로 커밋 밀어올리기(push)


아래 명령어로 push

git push
		=> 이미 git push -u origin main으로 대상 원격 브랜치가 지정되었기 때문에 가능



2 . 원격의 커밋 당겨오기(pull)

git pull



3. pull 할 것이 있을 때 push를 하면?

push 해보기

원격에 먼저 적용된 새 버전이 있으므로 적용 불가
pull 해서 원격의 버전을 받아온 다음 push 가능

push 할 것이 있을 시 pull 하는 두 가지 방법

git pull --no-rebase - merge 방식

==> 해결 가능 시 충돌 부분을 수정한 뒤 git add ., git commit으로 병합 완료

소스트리에서 확인해보기
reset으로 되돌린 다음 아래 방식도 해보기

git pull --rebase - rebase 방식

pull 상의 rebase는 다름 (협업시 사용 OK)

==> 해결 가능 시
충돌 부분을 수정한 뒤 git add .
아래 명령어로 계속
git rebase --continue
충돌이 모두 해결될 때까지 반복

------------------------


5. 로컬의 내역 강제 push해보기       (협업시 이야기가 되어있어야함 원격이 잘못되어서 로컬에 있는걸 강제로 바꿀때 사용)
로컬의 내역 충돌 전으로 reset

아래 명령어로 원격에 강제 적용

git push --force



--------------------

1. 로컬에서 브랜치 만들어 원격에 push 해보기
from-local 브랜치 만들기

아래 명령어로 원격에 push
아래와 같이 하면 대상을 명시하라는 메시지 나타남
git push 


아래 명령어로 원격의 브랜치 명시 및 기본설정 (원격도 브랜치 같은 이름으로 생성)
git push -u origin 브랜치 이름

--------------------------------------------
브랜치 목록 살펴보기

GitHub에서 목록 보기
아래 명령어로 로컬과 원격의 브랜치들 확인

git branch --all

-------------------------------------------------

2. 원격의 브랜치 로컬에 받아오기

GitHub에서 from-remote 브랜치 만들기

git branch -a에서 현재는 보이지 않음

아래 명령어로 원격의 변경사항 확인  ( 사실 우리가 pull 할때 자동으로 fetch진행후 됨 ) 
git fetch
	=> git brahcn -a로 확인

아래 명령어로 로컬에 같은 이름의 브랜치를 생성하여 연결하고 switch
git switch -t origin/브랜치이름


3. 원격의 브랜치 삭제
git push (원격 이름) --delete (원격의 브랜치명)
하고나서 로컬에 같은 이름으로 남아있는것도 사용다하면 지워주기 



